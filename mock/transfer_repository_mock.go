// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../mock/transfer_repository_mock.go -package=mock -mock_names=Repository=TransferRepositoryMock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	transfer "moneytransfer/internal/transfer"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// TransferRepositoryMock is a mock of Repository interface.
type TransferRepositoryMock struct {
	ctrl     *gomock.Controller
	recorder *TransferRepositoryMockMockRecorder
}

// TransferRepositoryMockMockRecorder is the mock recorder for TransferRepositoryMock.
type TransferRepositoryMockMockRecorder struct {
	mock *TransferRepositoryMock
}

// NewTransferRepositoryMock creates a new mock instance.
func NewTransferRepositoryMock(ctrl *gomock.Controller) *TransferRepositoryMock {
	mock := &TransferRepositoryMock{ctrl: ctrl}
	mock.recorder = &TransferRepositoryMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TransferRepositoryMock) EXPECT() *TransferRepositoryMockMockRecorder {
	return m.recorder
}

// CreateBulkTransfers mocks base method.
func (m *TransferRepositoryMock) CreateBulkTransfers(ctx context.Context, tx *sql.Tx, transfers []transfer.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBulkTransfers", ctx, tx, transfers)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBulkTransfers indicates an expected call of CreateBulkTransfers.
func (mr *TransferRepositoryMockMockRecorder) CreateBulkTransfers(ctx, tx, transfers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBulkTransfers", reflect.TypeOf((*TransferRepositoryMock)(nil).CreateBulkTransfers), ctx, tx, transfers)
}
