// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../mock/account_repository_mock.go -package=mock -mock_names=Repository=AccountRepositoryMock
//

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	account "moneytransfer/internal/account"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// AccountRepositoryMock is a mock of Repository interface.
type AccountRepositoryMock struct {
	ctrl     *gomock.Controller
	recorder *AccountRepositoryMockMockRecorder
}

// AccountRepositoryMockMockRecorder is the mock recorder for AccountRepositoryMock.
type AccountRepositoryMockMockRecorder struct {
	mock *AccountRepositoryMock
}

// NewAccountRepositoryMock creates a new mock instance.
func NewAccountRepositoryMock(ctrl *gomock.Controller) *AccountRepositoryMock {
	mock := &AccountRepositoryMock{ctrl: ctrl}
	mock.recorder = &AccountRepositoryMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *AccountRepositoryMock) EXPECT() *AccountRepositoryMockMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *AccountRepositoryMock) Create(acc *account.BankAccount, tx *sql.Tx) (*account.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", acc, tx)
	ret0, _ := ret[0].(*account.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *AccountRepositoryMockMockRecorder) Create(acc, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*AccountRepositoryMock)(nil).Create), acc, tx)
}

// Delete mocks base method.
func (m *AccountRepositoryMock) Delete(id int64, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *AccountRepositoryMockMockRecorder) Delete(id, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*AccountRepositoryMock)(nil).Delete), id, tx)
}

// Get mocks base method.
func (m *AccountRepositoryMock) Get(id int64, tx *sql.Tx) (*account.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id, tx)
	ret0, _ := ret[0].(*account.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *AccountRepositoryMockMockRecorder) Get(id, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*AccountRepositoryMock)(nil).Get), id, tx)
}

// GetByIBAN mocks base method.
func (m *AccountRepositoryMock) GetByIBAN(iban string, tx *sql.Tx) (*account.BankAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIBAN", iban, tx)
	ret0, _ := ret[0].(*account.BankAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIBAN indicates an expected call of GetByIBAN.
func (mr *AccountRepositoryMockMockRecorder) GetByIBAN(iban, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIBAN", reflect.TypeOf((*AccountRepositoryMock)(nil).GetByIBAN), iban, tx)
}

// Update mocks base method.
func (m *AccountRepositoryMock) Update(acc *account.BankAccount, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", acc, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *AccountRepositoryMockMockRecorder) Update(acc, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*AccountRepositoryMock)(nil).Update), acc, tx)
}
