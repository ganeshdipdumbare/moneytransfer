// Code generated by MockGen. DO NOT EDIT.
// Source: transfer_service.go
//
// Generated by this command:
//
//	mockgen -source=transfer_service.go -destination=../../mock/service_mock.go -package=mock -mock_names=TransferService=TransferServiceMock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	service "moneytransfer/internal/service"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// TransferServiceMock is a mock of TransferService interface.
type TransferServiceMock struct {
	ctrl     *gomock.Controller
	recorder *TransferServiceMockMockRecorder
}

// TransferServiceMockMockRecorder is the mock recorder for TransferServiceMock.
type TransferServiceMockMockRecorder struct {
	mock *TransferServiceMock
}

// NewTransferServiceMock creates a new mock instance.
func NewTransferServiceMock(ctrl *gomock.Controller) *TransferServiceMock {
	mock := &TransferServiceMock{ctrl: ctrl}
	mock.recorder = &TransferServiceMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TransferServiceMock) EXPECT() *TransferServiceMockMockRecorder {
	return m.recorder
}

// BulkTransfer mocks base method.
func (m *TransferServiceMock) BulkTransfer(ctx context.Context, req service.BulkTransferRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkTransfer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkTransfer indicates an expected call of BulkTransfer.
func (mr *TransferServiceMockMockRecorder) BulkTransfer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkTransfer", reflect.TypeOf((*TransferServiceMock)(nil).BulkTransfer), ctx, req)
}
